import argparse
import scrapetube, os, re
from urllib.parse import urlparse, parse_qs
from youtube_transcript_api import YouTubeTranscriptApi
import youtube_transcript_api.formatters as formatters

from youtube_transcript_api import TranscriptsDisabled, NoTranscriptFound, NoTranscriptAvailable

import asyncio

def sanitize_string(input_string):
    # Replace problematic characters with underscores
    sanitized_string = re.sub(r'[\\/:*?"<>|]', '_', input_string)
    return sanitized_string

async def get_video_transcription(video_id: str, output_path: str, format_type="srt", desired_language = None):
    print(f"Getting video {video_id} at {output_path}...")
    try:
        target_code = None
        if (desired_language != None):
            target_code = desired_language
        else:
            available_transcripts = await asyncio.to_thread(YouTubeTranscriptApi.list_transcripts, video_id)
            generated_lang = list(available_transcripts._generated_transcripts.keys())[0]
            target_code = generated_lang

        transcript = await asyncio.to_thread(YouTubeTranscriptApi.get_transcript, video_id, languages=[target_code])

        data = ""
        if format_type == "srt" :
            data = formatters.SRTFormatter().format_transcript(transcript=transcript)
        elif format_type == "json":
            data = formatters.JSONFormatter().format_transcript(transcript=transcript)
        elif format_type == "webvtt":
            data = formatters.WebVTTFormatter().format_transcript(transcript=transcript)
        else:
            data = formatters.TextFormatter().format_transcript(transcript=transcript)

        with open(output_path, "w") as file:
            file.write(data)

    except TranscriptsDisabled:
        print(f"Transcription is disabled for video '{video_id}'. Skipping.")
    except NoTranscriptAvailable:
        print(f"No transcript available for video '{video_id}'. Skipping. ")
    except NoTranscriptFound:
        print(f"No transcript found for video '{video_id}'. Skipping. ")
    except Exception as e:
        print(f"Untreated exception raised '{e}'")

def getVideoSRT(videoID: str, outputp: str):
    print(f"Getting video {videoID}...")
    generated_lang = list(YouTubeTranscriptApi.list_transcripts(videoID)._generated_transcripts.keys())[0]
    transcript = YouTubeTranscriptApi.get_transcript(videoID, languages=[generated_lang])

    srt = SRTFormatter().format_transcript(transcript=transcript)

    with open(outputp, "w") as file:
        file.write(srt)

async def main():
    parser = argparse.ArgumentParser(description="A simple script for generating SRTs for all videos of a given channel on YouTube")
    parser.add_argument("--type", help="The type of the provided link", choices=["channel", "playlist"], required=True)
    parser.add_argument("--folder", help="The output folder path (defaults to current)", default=".")
    parser.add_argument("--language", help="The desired language code (defaults to the Youtube autogenerated)")
    parser.add_argument("--format", help="The format to output to", choices=["json", "pretty", "text", "webvtt", "srt"], default="srt")
    parser.add_argument("target", help="The target link")
    args = parser.parse_args()

    if not os.path.exists(args.folder):
        print(f"Creating folder {args.folder}")
        os.mkdir(args.folder)

    videos = []
    print("Starting scrapetube")
    if(args.type == "channel"):
        videos = scrapetube.get_channel(channel_url=args.target, sleep=1)
    elif(args.type == "playlist"):
        playlistID = parse_qs(urlparse(args.target).query)['list'][0]
        videos = scrapetube.get_playlist(playlistID, sleep=2)
    print("Scrapetube finished")


    format2ext = {
        "json": "json",
         "pretty": "txt",
         "text": "txt",
         "webvtt": "vtt",
         "srt": "srt"
            }

    tasks = []
    for video in videos:
        video_id = video["videoId"]
        title = video["title"]["runs"][0]["text"]
        title = sanitize_string(title)
        output_path = f"{args.folder}/[{video_id}] - {title}.{format2ext[args.format]}"

        if os.path.exists(output_path):
            continue

        task = asyncio.create_task(get_video_transcription(video_id, output_path, desired_language=args.language, format_type=args.format))
        tasks.append(task)

    await asyncio.gather(*tasks)



if __name__ == "__main__":
    asyncio.run(main())
